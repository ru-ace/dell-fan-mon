# Sample dell-fan-mon configuration file (/etc/dell-fan-mon.conf).
# Fan monitor and control using dell-smm-hwmon(i8k) kernel module 
# or direct SMM BIOS calls on Dell laptops.

# DISCLAIMER
# This program calls undocumented functions of Dell SMM BIOS by defaults.
# USE ON YOUR OWN RISK

# WARNING:  If you change this file, please stop dell-fan-mon 
#           and test new config in verbose mode (dell-fan-mon -v) for a while

# Get/set methods (default 0 (i8k))
# 0 - use dell-smm-hwmon(i8k) kernel module (can be used under unprivileged user)
# 1 - use direct SMM BIOS calls bypassing dell-smm-hwmon(i8k) kernel module 
#     so, if you needed, you can blacklisted this module (need root privileges) 
mode                1 

# Set fan control logic (default 1)
# 0 - default logic (see end of this file for more info)
# 1 - allow bios to control fans. Stops/starts fans оnly at boundary temps
#     temp < t_low  : fans stop  
#     temp > t_high : fans start  
fan_ctrl_logic_mode 1

# Daemon mode - detach from console (default: 0)
# Please don't change it, until you know what you do: current version of the startup scripts works only with default value.
daemon              0 

# Disable bios fans control (0, 1, 2)
# Not always works
# 0 - don't disablе bios fans control (default)
# 1 - disable with DISABLE_BIOS_METHOD1 ( code from https://github.com/clopez/dellfan )
# 2 - disable with DISABLE_BIOS_METHOD2 ( code from https://github.com/TomFreudenberg/dell-bios-fan-control ) 
# Before change it in config file, try it in verbose mode (sudo dell-fan-mon -v --bios_disable_method 2) 
# and wait until temp > t_mid and fans was on. If during lowering temp bios doesn't try change fan state: seems it works.
# Please notice: for using this option you need root privileges.
bios_disable_method 0 

# Period in milliseconds for checking temp and setting fans (default: 1000 ms)
period	            1000

# Period in miliseconds for checking and correct fan state (default: 1000 ms)
# Used only when bios_disable_method = 0 
fan_check_period    1000

# Wait jump_timeout miliseconds, after abnormal temp jumping (default: 3000 ms)
jump_timeout	    3000

# Temperature difference between checks, at which the new value is considered abnormal (default: 5°)
jump_temp_delta     5

# Set mode for laptops with discrete gpu:
# 0 - cpu integrated grapfics. use cpu temp for fan control logic   
# 1 - use max(cpu_temp, gpu_temp) for fan control logic (default)
# 2 - separate fans control 
# Before change it in config file, try it in verbose mode (sudo dell-fan-mon -v --mode 1 --discrete_gpu_mode 2) 
# This allow you to check that autodetection of needed parameters works. 
# Please notice: discrete_gpu_mode can automatically switch to 0 if autodetection of gpu_temp_sensor_id failed.
# In this case use get_gpu_temp_cmd below.
discrete_gpu_mode   1

# Command line to get disrete GPU temp
# As output of the command expected line with number 
#get_gpu_temp_cmd    nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader

# Used only when discrete_gpu_mode = 2
# Set corresponding fan_id for gpu. 
# Autodetected via smm bios, if doesn't - please use discrete_gpu_mode = 1. Or set it manualy on your own risk.
# 9 - autodetect, 0 = right,  1 = left
gpu_fan_id          9

# Temperature thresholds
# temp "low" in celsius     (default: 45°)
t_low	            50
# temp "middle" in celsius  (default: 60°)
t_mid	            55
# temp "high" in celsius    (default: 80°)
t_high	            60

# Fan status for corresponding temperature thresholds
#  0 - OFF, 1 - LOW, 2 - HIGH
# fan state for temp "low"  (default: 0 - OFF)
t_low_fan           0
# fan state for temp "mid"  (default: 1 - LOW)
t_mid_fan           1
# fan state for temp "high" (default: 1 - LOW)
t_high_fan          1


# Default fan control logic:
# for default values t_low_fan / t_mid_fan / t_high_fan
# When temperature rising:
# if temp in [t_low,t_mid] and fan = OFF: fan = OFF
# if temp > t_mid: fan = LOW
# if temp > t_high: fan = HIGH 

# When temperature lowering:
# if temp < t_low: fan = OFF
# if temp in [t_low,t_mid] and fan = LOW: fan = LOW
# if temp in [t_low, t_high] and fan = HIGH: fan = HIGH

# real code:
#    if (temp <= cfg.t_low)
#        fan_state = cfg.t_low_fan;
#    else if (temp > cfg.t_high)
#        fan_state = cfg.t_high_fan;
#    else if (temp >= cfg.t_mid)
#        fan_state = fan_state > cfg.t_mid_fan ? fan_state : cfg.t_mid_fan;
